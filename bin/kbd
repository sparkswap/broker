#!/usr/bin/env node

/**
 * Kinesis Broker Daemon
 */

const program = require('caporal')

const BrokerDaemon = require('../broker-daemon')
const { validations } = require('../broker-cli/utils')

const { version: CLI_VERSION } = require('../package.json')

// KBD Specific ENV variables
const {
  RPC_ADDRESS,
  DATA_DIR,
  ENGINE_TYPE,
  EXCHANGE_RPC_HOST,
  MARKETS
} = process.env

// LND Specific ENV variables. ONLY used if ENGINE_TYPE is LND
// TODO: this may not be the correct way to set environment variables for a particular engine
const {
  LND_TLS_CERT,
  LND_MACAROON,
  // TODO: rename this variable
  ENGINE_RPC_HOST: LND_RPC_HOST
} = process.env

// TODO: Add validations to ./bin/kbd when they become available
program
  .version(CLI_VERSION)
  .option('--rpc-address <server>', 'Host and port to set up the RPC server on.', validations.isHost, RPC_ADDRESS)
  .option('--data-dir <path>', 'Location to store kinesis data.', validations.isFormattedPath, DATA_DIR)
  .option('--markets <markets>', 'Comma-separated market names to track on startup', validations.areValidMarketNames, MARKETS)
  .option('--engine-type', 'The type of Kinesis engine. Example: lnd', null, ENGINE_TYPE)
  .option('--exchange-host', 'The host address for the Kinesis Relayer', validations.isHost, EXCHANGE_RPC_HOST)

  // LND Specific commands
  // These will be validated based off of the engine type
  .option('--lnd-rpc <server>', 'Location of the LND RPC server to use.', validations.isHost, LND_RPC_HOST)
  .option('--lnd-tls <path>', 'Location of the certificate to use when communicating with LND.', validations.isFormattedPath, LND_TLS_CERT)
  .option('--lnd-macaroon <path>', 'Location of the macaroon to use when communicating with LND.', validations.isFormattedPath, LND_MACAROON)
  .action((args, opts) => {
    const {
      rpcAddress,
      dataDir,
      markets
      // engineType,
      // exchangeHost,
      // lndRpc,
      // lndTls,
      // lndMacaroon
    } = opts

    return new BrokerDaemon(rpcAddress, dataDir, markets)
  })

program.parse(process.argv)
