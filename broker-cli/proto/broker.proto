/**
 * This is the API documentation for the Broker Daemon RPC Server.
 */
syntax = "proto3";

import "google/protobuf/empty.proto";

enum Side {
  BID = 0;
  ASK = 1;
}

message EngineStatus {
  string symbol = 1;
  string status = 2;
}

message HealthCheckResponse {
  repeated EngineStatus engine_status = 1;
  string relayer_status = 2;
}

service AdminService {
  rpc HealthCheck (google.protobuf.Empty) returns (HealthCheckResponse);
}

enum TimeInForce {
  GTC = 0;
  FOK = 1;
  IOC = 2;
}

message CreateBlockOrderRequest {
  string market = 1;
  Side side = 2;
  /**
   * Amounts are expressed in common units for a currency (e.g. BTC) and therefore support decimals
   * Protobuf does not support a decimal type, so we represent it as a string
   */
  string amount = 3;
  oneof price_restriction {
    bool is_market_order = 4;
    /**
     * Prices are decimals but are represented as strings since Protobuf does not support a decimal type
     */
    string limit_price = 5;
  }

  TimeInForce time_in_force = 6;
}

message CreateBlockOrderResponse {
  string block_order_id = 1;
}

message Order {
  enum OrderStatus {
    CREATED = 0;
    PLACED = 1;
    FILLED = 2;
    EXECUTED = 3;
    COMPLETED = 4;
    REJECTED = 5;
  }

  string order_id = 1;
  OrderStatus order_status = 2;
  /**
   * Amounts are expressed in common units for a currency (e.g. BTC) and therefore support decimals
   * Protobuf does not support a decimal type, so we represent it as a string
   */
  string amount = 3;
  /**
   * Prices are decimals but are represented as strings since Protobuf does not support a decimal type
   */
  string price = 4;
}

message Fill {
  enum FillStatus {
    CREATED = 0;
    FILLED = 1;
    EXECUTED = 2;
    COMPLETED = 3;
    REJECTED = 4;
  }
  string order_id = 1;
  string fill_id = 2;
  FillStatus fill_status = 3;
  /**
   * Amounts are expressed in common units for a currency (e.g. BTC) and therefore support decimals
   * Protobuf does not support a decimal type, so we represent it as a string
   */
  string amount = 4;
  string price = 5;
}

message BlockOrder {
  enum BlockOrderStatus {
    ACTIVE = 0;
    CANCELLED = 1;
    COMPLETED = 2;
    FAILED = 3;
  }
  string block_order_id = 1;
  string market = 2;
  Side side = 3;
  /**
   * Amounts are expressed in common units for a currency (e.g. BTC) and therefore support decimals
   * Protobuf does not support a decimal type, so we represent it as a string
   */
  string amount = 4;
  oneof price_restriction {
    bool is_market_order = 13;
    /**
     * Prices are decimals but are represented as strings since Protobuf does not support a decimal type
     */
    string limit_price = 14;
  }
  TimeInForce time_in_force = 5;
  BlockOrderStatus status = 6;
}

message GetBlockOrderRequest {
  string block_order_id = 1;
}

message GetBlockOrderResponse {
  BlockOrder.BlockOrderStatus status = 1;

  string market = 10;
  Side side = 11;
  /**
   * Amounts are expressed in common units for a currency (e.g. BTC) and therefore support decimals
   * Protobuf does not support a decimal type, so we represent it as a string
   */
  string amount = 12;
  oneof price_restriction {
    bool is_market_order = 13;
    /**
     * Prices are decimals but are represented as strings since Protobuf does not support a decimal type
     */
    string limit_price = 14;
  }
  TimeInForce time_in_force = 15;

  string fill_amount = 20;
  repeated Order open_orders = 21;
  repeated Fill fills = 22;
}

message CancelBlockOrderRequest {
  string block_order_id = 1;
}

message GetBlockOrdersResponse {
  repeated BlockOrder block_orders = 1;
}

message GetBlockOrdersRequest {
  string market = 1;
}

service OrderService {
  rpc CreateBlockOrder (CreateBlockOrderRequest) returns (CreateBlockOrderResponse);
  rpc GetBlockOrder (GetBlockOrderRequest) returns (GetBlockOrderResponse);
  rpc CancelBlockOrder (CancelBlockOrderRequest) returns (google.protobuf.Empty);
  rpc GetBlockOrders (GetBlockOrdersRequest) returns (GetBlockOrdersResponse);
}

message WatchMarketRequest {
  string market = 1;
}

message WatchMarketResponse {

  EventType type = 1;
  MarketEvent market_event = 2;

  enum EventType {
      ADD = 0;
      DELETE = 1;
  }
}

message MarketEvent {
  string orderId = 1;
  string amount = 2;
  string price = 3;
  Side side = 4;
}

service OrderBookService {
  rpc WatchMarket (WatchMarketRequest) returns (stream WatchMarketResponse);
}

enum Symbol {
  BTC = 0;
  LTC = 1;
}

message NewDepositAddressRequest {
  Symbol symbol = 1;
}

message NewDepositAddressResponse {
  string address = 1;
}

message Balance {
  string symbol = 1;
  int64 totalBalance = 2;
  int64 totalChannelBalance = 3;
}

message GetBalancesResponse {
  repeated Balance balances = 1;
}

message CommitBalanceRequest {
  Symbol symbol = 1;
  int64 balance = 2;
}

service WalletService {
  rpc NewDepositAddress (NewDepositAddressRequest) returns (NewDepositAddressResponse);
  rpc GetBalances (google.protobuf.Empty) returns (GetBalancesResponse);
  rpc CommitBalance (CommitBalanceRequest) returns (google.protobuf.Empty);
}
