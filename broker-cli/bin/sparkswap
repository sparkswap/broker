#!/usr/bin/env node

const program = require('caporal')
const compareVersions = require('compare-versions')
const colors = require('colors') // eslint-disable-line no-unused-vars

const {
  version: CLI_VERSION,
  engines: { node: currentVersion }
} = require('../package.json')

const commands = require('../commands')

const clientVersion = process.version.substring(1)

if (compareVersions(clientVersion, currentVersion) < 0) {
  console.error(`Wrong node version, required version: ${currentVersion}, your version: ${clientVersion}`.red)
  process.exit(1)
}

// LND currently uses ECDSA generated certs, which we use on the broker. We've
// add ECDSA to the gRPC cipher suites as it is not added by default.
// If this line is removed, we will see an SSL Handshake Error stating `no shared cipher`
process.env.GRPC_SSL_CIPHER_SUITES = 'HIGH+ECDSA:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384'

/**
 * SparkSwap Broker CLI
 *
 * @author SparkSwap
 */
program
  .logger(console)
  .version(CLI_VERSION)
  .description(`Ïž SparkSwap Broker CLI - http://sparkswap.com`)

/**
 * Initialize Commands
 *
 * We do this initialization to provide closures to each of our commands. Although
 * this may use a little more memory, it allows us to couple arguments/handlers in
 * the same file AND prevents us from cluttering the global scope when using caporal
 *
 * Please use `sparkswap --help` to see available commands
 */
Object.keys(commands).forEach((key) => commands[key](program))

program.parse(process.argv)
