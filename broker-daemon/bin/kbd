#!/usr/bin/env node

/**
 * Kinesis Broker Daemon
 */

const program = require('caporal')

const BrokerDaemon = require('../')

// TODO: Change this path to be KBD specific
const { validations } = require('../../broker-cli/utils')

const { version: CLI_VERSION } = require('../../package.json')

const {
  RPC_ADDRESS,
  DATA_DIR,
  EXCHANGE_RPC_HOST,
  MARKETS,
  INTERCHAIN_ROUTER_ADDRESS
} = process.env

const {
  LND_TLS_CERT,
  LND_MACAROON,
  // TODO: rename this variable
  ENGINE_RPC_HOST: LND_RPC_HOST
} = process.env

program
  .version(CLI_VERSION)
  .option('--rpc-address <server>', 'Add a host/port to listen for daemon RPC connections', validations.isHost, RPC_ADDRESS)
  .option('--interchain-router-address <server>', 'Add a host/port to listen for interchain router RPC connections', validations.isHost, INTERCHAIN_ROUTER_ADDRESS)
  .option('--data-dir <path>', 'Location to store kinesis data', validations.isFormattedPath, DATA_DIR)
  .option('--markets <markets>', 'Comma-separated market names to track on startup', validations.areValidMarketNames, MARKETS)
  .option('--exchange-host', 'The host address for the Kinesis Relayer', validations.isHost, EXCHANGE_RPC_HOST)

  // LND Specific commands
  // These will be validated based off of the engine type
  .option('--lnd-rpc <server>', 'Location of the LND RPC server to use.', validations.isHost, LND_RPC_HOST)
  .option('--lnd-tls <path>', 'Location of the certificate to use when communicating with LND.', validations.isFormattedPath, LND_TLS_CERT)
  .option('--lnd-macaroon <path>', 'Location of the macaroon to use when communicating with LND.', validations.isFormattedPath, LND_MACAROON)
  .action((args, opts) => {
    const {
      rpcAddress,
      dataDir,
      markets,
      interchainRouterAddress
      // engineType,
      // exchangeHost,
      // lndRpc,
      // lndTls,
      // lndMacaroon
    } = opts

    const brokerDaemon = new BrokerDaemon(rpcAddress, dataDir, markets, interchainRouterAddress)
    brokerDaemon.initialize()
    return brokerDaemon
  })

program.parse(process.argv)
