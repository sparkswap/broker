syntax = "proto3";

enum Side {

    BID = 0;
    ASK = 1;
}

message HealthCheckResponse {

    string status = 0;
}
service Health {
    rpc Check (google.protobuf.Empty) returns (HealthCheckResponse);
}

message google {

    message protobuf {

        message Empty {
        }
    }
}

message CreateOrderRequest {

    string pay_to = 0;
    string owner_id = 1;
    string base_symbol = 2;
    string counter_symbol = 3;
    int64 base_amount = 4;
    int64 counter_amount = 5;
    Side side = 6;
}

message CreateOrderResponse {

    string order_id = 0;
    string fee_payment_request = 1;
    string deposit_payment_request = 2;
}

message PlaceOrderRequest {

    string order_id = 0;
    string deposit_refund_payment_request = 1;
    string fee_refund_payment_request = 2;
}

message CancelOrderRequest {

    string order_id = 0;
}

message SubscribeFillRequest {

    string order_id = 0;
}

message SubscribeFillResponse {

    bytes swap_hash = 0;
    int64 fill_amount = 1;
}

message ExecuteOrderRequest {

    string order_id = 0;
}

message CompleteOrderRequest {

    string order_id = 0;
    bytes swap_preimage = 1;
}
service Maker {
    rpc CreateOrder (CreateOrderRequest) returns (CreateOrderResponse);
    rpc PlaceOrder (PlaceOrderRequest) returns (google.protobuf.Empty);
    rpc CancelOrder (CancelOrderRequest) returns (google.protobuf.Empty);
    rpc SubscribeFill (SubscribeFillRequest) returns (stream SubscribeFillResponse);
    rpc ExecuteOrder (ExecuteOrderRequest) returns (google.protobuf.Empty);
    rpc CompleteOrder (CompleteOrderRequest) returns (google.protobuf.Empty);
}

message CreateFillRequest {

    string order_id = 0;
    bytes swap_hash = 1;
    int64 fill_amount = 2;
}

message CreateFillResponse {

    string fill_id = 0;
    string fee_payment_request = 1;
    string deposit_payment_request = 2;
}

message FillOrderRequest {

    string fill_id = 0;
    string deposit_refund_payment_request = 1;
    string fee_refund_payment_request = 2;
}

message SubscribeExecuteRequest {

    string fill_id = 0;
}

message SubscribeExecuteResponse {

    string pay_to = 0;
}
service Taker {
    rpc CreateFill (CreateFillRequest) returns (CreateFillResponse);
    rpc FillOrder (FillOrderRequest) returns (google.protobuf.Empty);
    rpc SubscribeExecute (SubscribeExecuteRequest) returns (stream SubscribeExecuteResponse);
}

message MarketEvent {

    string event_id = 0;
    EventType event_type = 1;
    int64 timestamp = 2;
    string order_id = 3;
    int64 base_amount = 10;
    int64 counter_amount = 11;
    Side side = 12;
    int64 fill_amount = 20;

    enum EventType {

        PLACED = 0;
        CANCELLED = 1;
        FILLED = 2;
    }
}

message WatchMarketResponse {

    ResponseType type = 0;
    MarketEvent market_event = 1;

    enum ResponseType {

        NEW_EVENT = 1;
        EXISTING_EVENT = 2;
        EXISTING_EVENTS_DONE = 3;
    }
}

message WatchMarketRequest {

    string base_symbol = 0;
    string counter_symbol = 1;
    int64 last_updated = 2;
}
service OrderBook {
    rpc WatchMarket (WatchMarketRequest) returns (stream WatchMarketResponse);
}

message GetPublicKeyResponse {

    string public_key = 0;
}
service PaymentNetwork {
    rpc GetPublicKey (google.protobuf.Empty) returns (GetPublicKeyResponse);
}